// engine/i18n/lang-i18n.js
// –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —è–¥—Ä–æ: –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è, t(), —Å–æ–±—ã—Ç–∏—è, RTL/LTR, –∫–µ—à

const STORAGE_KEY = 'ra_lang';
const cache = new Map();
let current = localStorage.getItem(STORAGE_KEY) || 'ru';
let dict = null;

export const LANGS = [
  { code:'jp', flag:'üáØüáµ', name:'Êó•Êú¨Ë™û' },
  { code:'kr', flag:'üá∞üá∑', name:'ÌïúÍµ≠Ïñ¥' },
  { code:'en', flag:'üá∫üá∏', name:'English' },
  { code:'de', flag:'üá©üá™', name:'Deutsch' },
  { code:'pl', flag:'üáµüá±', name:'Polski' },
  { code:'hi', flag:'üáÆüá≥', name:'‡§π‡§ø‡§®‡•ç‡§¶‡•Ä' },
  { code:'tr', flag:'üáπüá∑', name:'T√ºrk√ße' },
  { code:'ar', flag:'üá∏üá¶', name:'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©' },
  { code:'pt', flag:'üáßüá∑', name:'Portugu√™s' },
  { code:'es', flag:'üá™üá∏', name:'Espa√±ol' },
  { code:'ru', flag:'üá∑üá∫', name:'–†—É—Å—Å–∫–∏–π' } // –∞–¥–º–∏–Ω
];

function getByPath(obj, path) {
  return path.split('.').reduce((o,k)=> (o && k in o)? o[k] : undefined, obj);
}

export function getLang(){ return current; }

export async function setLang(code){
  if (!code) return;
  current = code;
  localStorage.setItem(STORAGE_KEY, code);
  await loadDict(code);
  applyRTL();
  translateDOM();
  window.dispatchEvent(new CustomEvent('languageChanged', { detail:{ code, dict }}));
}

export async function loadDict(code = current){
  if (cache.has(code)) { dict = cache.get(code); return dict; }
  const res = await fetch(`../lang/${code}.json`);
  if (!res.ok) throw new Error(`Lang file not found: ${code}`);
  dict = await res.json();
  cache.set(code, dict);
  return dict;
}

export function t(path, fallback=''){
  const val = getByPath(dict || {}, path);
  return (val == null) ? fallback : val;
}

// –∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ [data-i18n] –≤ DOM
export function translateDOM(root=document){
  root.querySelectorAll('[data-i18n]').forEach(el=>{
    const key = el.getAttribute('data-i18n');
    const val = t(key, el.textContent);
    if (typeof val === 'string') el.textContent = val;
  });
}

// –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å dir="rtl" –¥–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ –∏ —Ç.–ø.
function applyRTL(){
  const rtl = !!(dict && dict.language && dict.language.rtl);
  document.documentElement.setAttribute('dir', rtl ? 'rtl' : 'ltr');
}

export async function i18nInit(defaultCode='ru'){
  try {
    if (!current) current = defaultCode;
    await setLang(current);
  } catch (e){
    console.error('[i18nInit]', e);
    if (current !== defaultCode) await setLang(defaultCode);
  }
}