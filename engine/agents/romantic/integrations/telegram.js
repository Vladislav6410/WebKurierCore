/**
 * Romantic Agent ‚Äî Telegram Integration (funnel-ready)
 * ----------------------------------------------------
 * –†–µ–∂–∏–º—ã:
 *  - FUNNEL: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ø–¥–µ–π—Ç—ã –≤ –æ–±—â—É—é —à–∏–Ω—É /webhook/ingest
 *  - LOCAL:  –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —è–¥—Ä–æ RomanticAgent (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
 *
 * ENV:
 *   TELEGRAM_TOKEN=...
 *   FUNNEL_API=https://<your-api>/webhook/ingest   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –≤–∫–ª—é—á–∞–µ—Ç FUNNEL
 */

import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';

// –§–æ–ª–±—ç–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —è–¥—Ä–æ (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ FUNNEL_API)
let LocalAgent = null;
try {
  const mod = await import('../romantic-agent.js');
  LocalAgent = mod.RomanticAgent || null;
} catch { /* –ª–æ–∫–∞–ª—å–Ω–æ–µ —è–¥—Ä–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ */ }

const token = process.env.TELEGRAM_TOKEN;
if (!token) {
  console.error('‚ö†Ô∏è TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.');
  process.exit(1);
}

const FUNNEL_API = process.env.FUNNEL_API || '';
const MODE = FUNNEL_API ? 'FUNNEL' : 'LOCAL';
const bot = new TelegramBot(token, { polling: true });
const agent = MODE === 'LOCAL' && LocalAgent ? new LocalAgent() : null;

console.log(`üíå Romantic Agent Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω... –†–µ–∂–∏–º: ${MODE}`);

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();
  if (!text) return;

  if (text.startsWith('/start')) {
    await bot.sendMessage(
      chatId,
      'üíû –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Romantic Agent. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ ‚ú®'
    );
    return;
  }

  try {
    if (MODE === 'FUNNEL') {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –æ–±—â—É—é —à–∏–Ω—É ‚Üí –æ–Ω–∞ —Ä–µ—à–∏—Ç, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å
      const { data } = await axios.post(FUNNEL_API, {
        channel: 'telegram',
        agent: 'romantic',
        payload: { message: msg }        // –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–ø–¥–µ–π—Ç
      }, { timeout: 10000 });

      const reply = data?.reply ?? '‚Ä¶';
      await bot.sendMessage(chatId, reply);
    } else {
      // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
      if (!agent) throw new Error('–õ–æ–∫–∞–ª—å–Ω–æ–µ —è–¥—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
      const reply = await agent.handle(text, { userId: chatId, mode: 'chat' });
      await bot.sendMessage(chatId, reply);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err?.message || err);
    await bot.sendMessage(chatId, 'üòî –ò–∑–≤–∏–Ω–∏, —Å–µ–π—á–∞—Å —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...');
  }
});