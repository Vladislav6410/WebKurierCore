/**
 * merge_feedback.js (enhanced)
 * ----------------------------
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç memory/feedback/*_new.txt ‚Üí prompts/*.txt
 * + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, –¥–µ–¥—É–ø, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –±—ç–∫–∞–ø, --dry
 *
 * –ó–∞–ø—É—Å–∫:
 *   node engine/agents/romantic/tools/merge_feedback.js
 *   node engine/agents/romantic/tools/merge_feedback.js --dry   # —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
 */

import { promises as fs } from 'fs';
import path from 'path';

const AGENT_DIR = path.resolve('engine/agents/romantic');
const PROMPTS_DIR = path.join(AGENT_DIR, 'prompts');
const FEEDBACK_DIR = path.join(AGENT_DIR, 'memory', 'feedback');
const BACKUP_DIR = path.join(AGENT_DIR, 'backups');
const DRY = process.argv.includes('--dry');

const MAP = [
  ['compliments_new.txt',   'compliments.txt'],
  ['date_ideas_new.txt',    'date_ideas.txt'],
  ['stories_new.txt',       'stories.txt'],
  ['night_stories_new.txt', 'night_stories.txt']
];

const MAX_LEN = 300; // –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ—Å—Ç—ã–Ω–µ–π

function normalizeLine(s){
  return (s || '')
    .replace(/\r/g, '')
    .replace(/\s+/g, ' ')
    .replace(/\s+([,.!?‚Ä¶;:])/g, '$1')
    .trim();
}

async function readLines(file){
  try {
    const txt = await fs.readFile(file, 'utf8');
    return txt.split('\n').map(normalizeLine).filter(Boolean);
  } catch { return []; }
}

async function writeLines(file, lines){
  await fs.mkdir(path.dirname(file), { recursive:true });
  await fs.writeFile(file, lines.join('\n') + '\n', 'utf8');
}

async function backupFile(file){
  try{
    const exists = await fs.readFile(file, 'utf8');
    const stamp = new Date().toISOString().replace(/[:.]/g,'-');
    const name = path.basename(file);
    await fs.mkdir(BACKUP_DIR, { recursive:true });
    await fs.writeFile(path.join(BACKUP_DIR, `${name}.${stamp}.bak`), exists, 'utf8');
  }catch{ /* no-op */ }
}

function merge(base, fresh){
  // –¥–µ–¥—É–ø –∫–µ–π—Å-–∏–Ω—Åensitive + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
  const seen = new Set(base.map(s => s.toLowerCase()));
  const out = [...base];
  for (const l of fresh){
    const n = l.slice(0, MAX_LEN);
    const key = n.toLowerCase();
    if (!seen.has(key)){
      seen.add(key);
      out.push(n);
    }
  }
  // –∞–ª—Ñ–∞–≤–∏—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ-—Ä—É—Å—Å–∫–∏, –ø–æ—Ç–æ–º –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é
  out.sort((a,b)=> a.localeCompare(b,'ru') || a.localeCompare(b));
  return out;
}

(async ()=>{
  let addedTotal = 0;
  for (const [srcName, dstName] of MAP){
    const src = path.join(FEEDBACK_DIR, srcName);
    const dst = path.join(PROMPTS_DIR, dstName);

    const fresh = await readLines(src);
    if (!fresh.length){
      console.log(`‚è≠  ${srcName} ‚Äî –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫`);
      continue;
    }

    const base = await readLines(dst);
    const merged = merge(base, fresh);
    const added = Math.max(0, merged.length - base.length);
    addedTotal += added;

    console.log(`‚Üí ${srcName} ‚Üí ${dstName}: +${added} (–∏—Ç–æ–≥–æ ${merged.length})`);

    if (!DRY){
      await backupFile(dst);
      await writeLines(dst, merged);
      // –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
      await fs.writeFile(src, '', 'utf8');
    }
  }
  console.log(DRY ? `üß™ DRY-RUN –∑–∞–≤–µ—Ä—à—ë–Ω.` : `‚úÖ –ì–æ—Ç–æ–≤–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ ~${addedTotal} —Å—Ç—Ä–æ–∫.`);
})().catch(e=>{ console.error('‚ùå –û—à–∏–±–∫–∞ merge_feedback:', e); process.exit(1); });