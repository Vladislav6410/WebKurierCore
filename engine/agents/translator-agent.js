// === Translator Agent ===
// –§–∞–π–ª: engine/agents/translator-agent.js

console.log("üåê Translator Agent –∑–∞–≥—Ä—É–∂–µ–Ω");

const supportedProviders = ["gpt", "google", "libre"];

let selectedProvider = localStorage.getItem("translator_provider") || "gpt";

// UI: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
function setTranslatorProvider(provider) {
  if (supportedProviders.includes(provider)) {
    selectedProvider = provider;
    localStorage.setItem("translator_provider", provider);
    console.log("‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫:", provider);
    return `üîÑ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${provider}`;
  } else {
    return "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.";
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
function getTranslatorProvider() {
  return selectedProvider;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
async function translateText(text, fromLang = "auto", toLang = "en") {
  switch (selectedProvider) {
    case "gpt":
      return gptTranslate(text, fromLang, toLang);
    case "google":
      return googleTranslate(text, fromLang, toLang);
    case "libre":
      return libreTranslate(text, fromLang, toLang);
    default:
      return "‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω.";
  }
}

// GPT-–ø–µ—Ä–µ–≤–æ–¥ (–∑–∞–≥–ª—É—à–∫–∞)
async function gptTranslate(text, from, to) {
  return `[GPT] (${from} ‚Üí ${to}): ${text}`;
}

// Google Translate (–∑–∞–≥–ª—É—à–∫–∞)
async function googleTranslate(text, from, to) {
  return `[Google] (${from} ‚Üí ${to}): ${text}`;
}

// LibreTranslate (–∑–∞–≥–ª—É—à–∫–∞)
async function libreTranslate(text, from, to) {
  return `[Libre] (${from} ‚Üí ${to}): ${text}`;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π (–¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)
window.translatorAgent = {
  setProvider: setTranslatorProvider,
  getProvider: getTranslatorProvider,
  translate: translateText,
};