// interface.js
console.log("üåê Translator Interface loaded");

const sourceInput = document.getElementById("source-text");
const resultOutput = document.getElementById("result-text");
const languageSelect = document.getElementById("language-select");
const translateButton = document.getElementById("translate-button");
const copyButton = document.getElementById("copy-button");
const speakerButton = document.getElementById("speaker-button");
const swapButton = document.getElementById("swap-button");

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
const languages = {
  "en": "English",
  "ru": "–†—É—Å—Å–∫–∏–π",
  "de": "Deutsch",
  "pl": "Polski",
  "fr": "Fran√ßais",
  "es": "Espa√±ol",
  "zh": "‰∏≠Êñá",
  "ar": "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"
};

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤
function populateLanguages() {
  for (const code in languages) {
    const option = document.createElement("option");
    option.value = code;
    option.textContent = languages[code];
    languageSelect.appendChild(option);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç LibreTranslate, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å)
async function translateText() {
  const text = sourceInput.value.trim();
  const targetLang = languageSelect.value;

  if (!text) {
    resultOutput.value = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.";
    return;
  }

  const response = await fetch("https://libretranslate.com/translate", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      q: text,
      source: "auto",
      target: targetLang,
      format: "text"
    })
  });

  const data = await response.json();
  resultOutput.value = data.translatedText || "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞";
}

// –ö–Ω–æ–ø–∫–∞ "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
copyButton.addEventListener("click", () => {
  navigator.clipboard.writeText(resultOutput.value);
  copyButton.textContent = "‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!";
  setTimeout(() => copyButton.textContent = "üìã", 1500);
});

// –ö–Ω–æ–ø–∫–∞ "–û–∑–≤—É—á–∏—Ç—å"
speakerButton.addEventListener("click", () => {
  const utterance = new SpeechSynthesisUtterance(resultOutput.value);
  utterance.lang = languageSelect.value;
  speechSynthesis.speak(utterance);
});

// –ö–Ω–æ–ø–∫–∞ "–°–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç ‚Üî –ø–µ—Ä–µ–≤–æ–¥"
swapButton.addEventListener("click", () => {
  const temp = sourceInput.value;
  sourceInput.value = resultOutput.value;
  resultOutput.value = temp;
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
translateButton.addEventListener("click", translateText);
languageSelect.addEventListener("change", () => resultOutput.value = "");
document.addEventListener("DOMContentLoaded", populateLanguages);// üìå –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥
function performTranslation() {
  const inputText = document.getElementById("inputText").value.trim();
  const sourceLang = document.getElementById("sourceLang").value;
  const targetLang = document.getElementById("targetLang").value;
  const outputDiv = document.getElementById("output");

  if (!inputText) {
    outputDiv.textContent = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.";
    return;
  }

  outputDiv.textContent = "üîÑ –ü–µ—Ä–µ–≤–æ–∂—É...";

  fetch("https://libretranslate.de/translate", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      q: inputText,
      source: sourceLang,
      target: targetLang,
      format: "text"
    })
  })
    .then(res => res.json())
    .then(data => {
      outputDiv.textContent = data.translatedText || "‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.";
    })
    .catch(err => {
      console.error(err);
      outputDiv.textContent = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.";
    });
}

// üìå –û–∑–≤—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
function speakOutput() {
  const text = document.getElementById("output").textContent;
  if (!text) return;
  const utterance = new SpeechSynthesisUtterance(text);
  speechSynthesis.speak(utterance);
}

// üìå –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
function copyOutput() {
  const text = document.getElementById("output").textContent;
  if (!text) return;
  navigator.clipboard.writeText(text).then(() => {
    alert("‚úÖ –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω.");
  });
}

// üìå –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë
function clearAll() {
  document.getElementById("inputText").value = "";
  document.getElementById("output").textContent = "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥...";
}function handleFileUpload() {
  const fileInput = document.getElementById('fileInput');
  const file = fileInput.files[0];
  if (!file) return alert("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.");

  const reader = new FileReader();

  reader.onload = function (e) {
    const text = e.target.result;
    document.getElementById('inputText').value = text;
    translateText(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  };

  if (file.type.startsWith('image/')) {
    alert("üì∑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.");
    // –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ: OCR-–º–æ–¥—É–ª—å
  } else {
    reader.readAsText(file);
  }
}