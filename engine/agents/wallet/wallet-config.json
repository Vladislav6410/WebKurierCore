// === wallet-agent.js ‚Äî WebCoin –ö–æ—à–µ–ª—ë–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π config ===

import config from "./wallet-config.json" assert { type: "json" };

const WALLET_KEY = "webcoin_balance";
const HISTORY_KEY = "webcoin_history";

// === ‚ë† –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
export function getBalance() {
  return parseInt(localStorage.getItem(WALLET_KEY) || config.initialBalance || 0, 10);
}

export function setBalance(amount) {
  const limited = Math.min(
    Math.max(amount, config.security.allowNegativeBalance ? -Infinity : 0),
    config.maxBalance || 999999
  );
  localStorage.setItem(WALLET_KEY, limited);
  if (config.historyEnabled) saveHistory(limited);
  updateBalanceUI();
  if (config.autoSave) saveBackup();
}

export function addCoins(amount) {
  const current = getBalance();
  const result = Math.min(current + amount, config.maxBalance || 999999);
  setBalance(result);
}

export function resetCoins() {
  setBalance(config.initialBalance || 0);
}

function saveBackup() {
  if (!config.backup?.enabled) return;
  const data = JSON.stringify({ balance: getBalance() });
  localStorage.setItem(config.backup.fileName || "wallet-backup.json", data);
}

function saveHistory(value) {
  if (!config.historyEnabled) return;
  const history = JSON.parse(localStorage.getItem(HISTORY_KEY) || "[]");
  history.unshift({ time: new Date().toISOString(), balance: value });
  const limited = history.slice(0, config.historyLimit || 100);
  localStorage.setItem(HISTORY_KEY, JSON.stringify(limited));
}

export function updateBalanceUI() {
  const balance = getBalance();
  const currency = config.currency || "WKC";
  ["balance", "webcoin-balance", "balance-display"].forEach(id => {
    const el = document.getElementById(id);
    if (el) el.textContent = id === "balance" ? balance : `–ë–∞–ª–∞–Ω—Å: ${balance} ${currency}`;
  });
}

// === ‚ë° –ö–æ–º–∞–Ω–¥—ã WALLET ===
const walletCommands = {
  "/add": {
    description: "/add [—á–∏—Å–ª–æ] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
    exec: args => {
      const step = config.minTransaction || 1;
      const amount = parseInt(args[0] || step, 10);
      if (isNaN(amount) || amount < step || amount > config.maxTransaction)
        throw `‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç ${step} –¥–æ ${config.maxTransaction}`;
      addCoins(amount);
      return `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} ${config.currency}`;
    }
  },
  "/reset": {
    description: "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å",
    exec: () => {
      resetCoins();
      return "üîÅ –ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω.";
    }
  },
  "/balance": {
    description: "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å",
    exec: () => `üí∞ –ë–∞–ª–∞–Ω—Å: ${getBalance()} ${config.currency}`
  },
  "/set": {
    description: "/set [—á–∏—Å–ª–æ] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å",
    exec: args => {
      const amount = parseInt(args[0], 10);
      if (isNaN(amount) || amount < 0 || amount > config.maxBalance)
        throw `‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${config.maxBalance}`;
      setBalance(amount);
      return `üîß –ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${amount} ${config.currency}`;
    }
  },
  "/export": {
    description: "/export ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ —Ñ–∞–π–ª",
    exec: () => {
      const data = JSON.stringify({ balance: getBalance() });
      const blob = new Blob([data], { type: "application/json" });
      const a = Object.assign(document.createElement("a"), {
        href: URL.createObjectURL(blob),
        download: config.backup.fileName || "wallet-backup.json"
      });
      a.click();
      return "üíæ –ë–∞–ª–∞–Ω—Å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.";
    }
  },
  "/import": {
    description: "/import ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–∑ —Ñ–∞–π–ª–∞",
    exec: (args, printToTerminal) => {
      const input = document.createElement("input");
      input.type = "file";
      input.accept = ".json";
      input.onchange = e => {
        const file = e.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = ev => {
          try {
            const data = JSON.parse(ev.target.result);
            if (typeof data.balance === "number") {
              setBalance(data.balance);
              printToTerminal(`üì• –ë–∞–ª–∞–Ω—Å –∑–∞–≥—Ä—É–∂–µ–Ω: ${data.balance} ${config.currency}`);
            } else throw "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.";
          } catch (err) {
            printToTerminal(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${err}`, true);
          }
        };
        reader.readAsText(file);
      };
      input.click();
      return "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –±–∞–ª–∞–Ω—Å–∞.";
    }
  }
};

// === ‚ë¢ –ö–æ–º–∞–Ω–¥—ã HELP ===
walletCommands["/help"] = {
  description: "/help ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",
  exec: () =>
    Object.entries(walletCommands)
      .map(([c, o]) => `${c}: ${o.description}`)
      .join("\n")
};

// === ‚ë£ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
export async function handleWalletCommand(command, printToTerminal) {
  const [cmd, ...args] = command.trim().split(/\s+/);
  const entry = walletCommands[cmd];
  if (!entry) return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help.";
  try {
    return await entry.exec(args, printToTerminal);
  } catch (e) {
    return `‚ö†Ô∏è ${e}`;
  }
}