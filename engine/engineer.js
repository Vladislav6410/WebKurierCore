// === WebKurier Engineer v2.1 ===
// –§–∞–π–ª: /engine/engineer.js

console.log("üîß Engineer.js –∑–∞–≥—Ä—É–∂–µ–Ω");

let memory = {};
let config = {};

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ===
async function handleEngineerCommand(command) {
  const parts = command.trim().split(/\s+/);
  const cmd = parts[0];
  const arg = parts.slice(1).join(" ");

  switch (cmd) {
    case "/help":
      return `üìò –ö–æ–º–∞–Ω–¥—ã:
  /save ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–º—è—Ç—å
  /load ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–º—è—Ç—å
  /add [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
  /config ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥
  /clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å
  /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã`;

    case "/save":
      return await saveMemory();

    case "/load":
      return await loadMemory();

    case "/add":
      if (!arg) return "‚ùó –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.";
      return addMemoryEntry(arg);

    case "/config":
      return await loadConfig();

    case "/clear":
      memory = {};
      localStorage.removeItem("memory_data");
      return "üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.";

    default:
      return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏ /help";
  }
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ Dropbox –∏ –ª–æ–∫–∞–ª—å–Ω–æ ===
async function saveMemory() {
  const data = {
    updated: new Date().toISOString(),
    notes: memory.notes || ""
  };

  try {
    localStorage.setItem("memory_data", JSON.stringify(data));
    await dropbox.uploadFileToDropbox("/engine/memory.json", data);
    return "üíæ –ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Dropbox –∏ localStorage.";
  } catch (e) {
    return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + e.message;
  }
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏: —Å–Ω–∞—á–∞–ª–∞ Dropbox, –ø–æ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ ===
async function loadMemory() {
  try {
    const remote = await dropbox.loadMemoryFromDropbox();
    if (remote && remote.notes !== undefined) {
      memory = remote;
      localStorage.setItem("memory_data", JSON.stringify(remote));
      return `üìÇ –ü–∞–º—è—Ç—å (–∏–∑ Dropbox):\n${remote.notes}`;
    }
  } catch (e) {
    console.warn("–û—à–∏–±–∫–∞ Dropbox:", e.message);
  }

  const local = JSON.parse(localStorage.getItem("memory_data") || "{}");
  memory = local;
  return local.notes
    ? `üìÇ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å:\n${local.notes}`
    : "üìÇ –ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞.";
}

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ ===
function addMemoryEntry(note) {
  const current = memory.notes || "";
  memory.notes = (current ? current + "\n" : "") + note;
  localStorage.setItem("memory_data", JSON.stringify(memory));
  return "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.";
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Dropbox ===
async function loadConfig() {
  try {
    const remote = await dropbox.loadConfigFromDropbox();
    if (remote) {
      config = remote;
      return "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω:\n" + JSON.stringify(config, null, 2);
    }
  } catch (e) {
    console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config:", e.message);
  }
  return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json";
}