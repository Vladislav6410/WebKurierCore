// === terminal.js ‚Äî –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª WebKurier ===
import * as MasterAgent from "./engine/agents/master-agent.js";

const WALLET_KEY = "webcoin_balance";

// --- –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ ---
function getBalance() {
  return parseInt(localStorage.getItem(WALLET_KEY) || "0", 10);
}

function setBalance(amount) {
  localStorage.setItem(WALLET_KEY, amount);
  localStorage.setItem("wallet_updated", new Date().toISOString());
  if (!localStorage.getItem("wallet_created")) {
    localStorage.setItem("wallet_created", new Date().toISOString());
  }
  updateBalanceUI();
}

function addCoins(amount) {
  const current = getBalance();
  setBalance(current + amount);
}

function resetWallet() {
  setBalance(0);
}

function updateBalanceUI() {
  const el = document.getElementById("wallet-balance");
  if (el) el.textContent = `üí∞ –ë–∞–ª–∞–Ω—Å: ${getBalance()} WebCoin`;
}

// --- –ñ—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π ---
function logTransaction(type, amount) {
  const history = JSON.parse(localStorage.getItem("wallet_history") || "[]");
  history.push({
    date: new Date().toLocaleString(),
    type,
    amount,
    balance: getBalance()
  });
  localStorage.setItem("wallet_history", JSON.stringify(history.slice(-50)));
}

// --- –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è ---
const originalAddCoins = addCoins;
addCoins = (amount) => {
  originalAddCoins(amount);
  logTransaction("DEPOSIT", amount);
};

const originalSetBalance = setBalance;
setBalance = (amount) => {
  const diff = amount - getBalance();
  originalSetBalance(amount);
  if (diff !== 0) {
    logTransaction(diff > 0 ? "DEPOSIT" : "WITHDRAW", Math.abs(diff));
  }
};

// --- –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ ---
function printToTerminal(message, isError = false) {
  // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "terminal-output" –∏–ª–∏ "terminal-log" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–≤–æ–µ–≥–æ HTML
  const output = document.getElementById("terminal-output") || document.getElementById("terminal-log");
  if (!output) return;

  const line = document.createElement("div");
  line.textContent = message;
  line.style.color = isError ? "red" : "white";
  output.appendChild(line);
  output.scrollTop = output.scrollHeight;
}

// --- –ö–æ–º–∞–Ω–¥—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ---
const commands = {
  "/help": {
    description: "üìò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
    exec: () =>
      Object.entries(commands)
        .map(([cmd, obj]) => `${cmd} ‚Äî ${obj.description}`)
        .join("\n")
  },
  "/add": {
    description: "–î–æ–±–∞–≤–∏—Ç—å WebCoin: /add [—á–∏—Å–ª–æ]",
    exec: ([amount]) => {
      const n = parseInt(amount || "10", 10);
      if (isNaN(n) || n <= 0) throw "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.";
      addCoins(n);
      return `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${n} WebCoin. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${getBalance()}`;
    }
  },
  "/set": {
    description: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å: /set [—á–∏—Å–ª–æ]",
    exec: ([amount]) => {
      const n = parseInt(amount, 10);
      if (isNaN(n) || n < 0) throw "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.";
      setBalance(n);
      return `üîß –ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${n} WebCoin.`;
    }
  },
  "/reset": {
    description: "–°–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å",
    exec: () => {
      resetWallet();
      return "üîÅ –ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω.";
    }
  },
  "/balance": {
    description: "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å",
    exec: () => `üí∞ –ë–∞–ª–∞–Ω—Å: ${getBalance()} WebCoin`
  },
  "/history": {
    description: "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π",
    exec: () => {
      const history = JSON.parse(localStorage.getItem("wallet_history") || "[]");
      if (history.length === 0) return "üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞";
      return history.map((entry, i) =>
        `${i + 1}. ${entry.date}: ${entry.type} ${entry.amount} WC ‚Üí ${entry.balance} WC`
      ).join("\n");
    }
  },
  "/import": {
    description: "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª—ë–∫ –∏–∑ —Ñ–∞–π–ª–∞",
    exec: () => {
      const input = document.createElement("input");
      input.type = "file";
      input.accept = ".json";
      input.onchange = (e) => {
        const file = e.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = () => {
          try {
            const data = JSON.parse(reader.result);
            if (typeof data.balance === "number") {
              setBalance(data.balance);
              if (data.created) localStorage.setItem("wallet_created", data.created);
              if (data.updated) localStorage.setItem("wallet_updated", data.updated);
              printToTerminal("üì• –ë–∞–ª–∞–Ω—Å –∑–∞–≥—Ä—É–∂–µ–Ω: " + data.balance + " WebCoin.");
            } else {
              throw "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.";
            }
          } catch (e) {
            printToTerminal("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: " + e, true);
          }
        };
        reader.readAsText(file);
      };
      input.click();
      return "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ—à–µ–ª—å–∫–∞.";
    }
  },
  "/export": {
    description: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫ –≤ —Ñ–∞–π–ª",
    exec: () => {
      const data = JSON.stringify({
        balance: getBalance(),
        created: localStorage.getItem("wallet_created"),
        updated: localStorage.getItem("wallet_updated")
      });
      const blob = new Blob([data], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "webcoin_wallet.json";
      a.click();
      return "üíæ –ë–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.";
    }
  },
  "/stats": {
    description: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—à–µ–ª—å–∫–∞",
    exec: () => {
      const created = new Date(localStorage.getItem("wallet_created") || Date.now()).toLocaleString();
      const updated = new Date(localStorage.getItem("wallet_updated") || Date.now()).toLocaleString();
      return `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nü™ô –ë–∞–ª–∞–Ω—Å: ${getBalance()} WebCoin\nüìÖ –°–æ–∑–¥–∞–Ω: ${created}\nüïì –û–±–Ω–æ–≤–ª—ë–Ω: ${updated}`;
    }
  },
  "/sync": {
    description: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–æ–º",
    exec: async () => {
      try {
        const res = await fetch("/api/sync-balance", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            balance: getBalance(),
            created: localStorage.getItem("wallet_created"),
            updated: localStorage.getItem("wallet_updated")
          })
        });
        const json = await res.json();
        return "üåê –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: " + (json.status || "—É—Å–ø–µ—à–Ω–æ");
      } catch (e) {
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: " + e;
      }
    }
  },
  "/tip": {
    description: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç—É WebCoin: /tip [–∞–≥–µ–Ω—Ç] [—Å—É–º–º–∞]",
    exec: async ([agent, amount]) => {
      const value = parseInt(amount, 10);
      if (!agent || isNaN(value) || value <= 0) throw "–£–∫–∞–∂–∏ –∞–≥–µ–Ω—Ç–∞ –∏ —Å—É–º–º—É.";
      if (getBalance() < value) throw "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.";
      const result = await MasterAgent.sendCoins(agent, value);
      if (!result.success) throw `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.error || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`;
      setBalance(getBalance() - value);
      return `üì§ ${value} WebCoin –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç—É ${agent}`;
    }
  },
  "/agents": {
    description: "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤",
    exec: async () => {
      try {
        const agents = await MasterAgent.listActiveAgents();
        return "ü§ñ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:\n" + agents.map(a => `- ${a.name} (v${a.version})`).join("\n");
      } catch (e) {
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: " + e;
      }
    }
  },
  "/market": {
    description: "–ü–æ–∫–∞–∑–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –∫—É—Ä—Å—ã WebCoin",
    exec: async () => {
      try {
        const rates = await MasterAgent.getExchangeRates();
        return `üìà –†—ã–Ω–æ—á–Ω—ã–µ –∫—É—Ä—Å—ã:\n${Object.entries(rates)
          .map(([currency, rate]) => `- 1 WebCoin = ${rate} ${currency}`)
          .join("\n")}`;
      } catch (e) {
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: " + e;
      }
    }
  },
  "/status": {
    description: "–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞: /status [–∏–º—è]",
    exec: ([agentName]) => {
      if (!agentName) throw "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞.";
      const status = MasterAgent.status && MasterAgent.status[agentName] || '‚ùì –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
      return `üìç –ê–≥–µ–Ω—Ç "${agentName}": ${status}`;
    }
  },
  "/reload": {
    description: "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≥–µ–Ω—Ç–∞: /reload [–∏–º—è]",
    exec: ([agentName]) => {
      if (!agentName) throw "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞.";
      if (MasterAgent.agents && agentName in MasterAgent.agents) {
        MasterAgent.reload(agentName);
        return `üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∞–≥–µ–Ω—Ç–∞ "${agentName}"...`;
      } else {
        throw `–ê–≥–µ–Ω—Ç "${agentName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
      }
    }
  },
  "/clear": {
    description: "–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
    exec: () => {
      const output = document.getElementById("terminal-output") || document.getElementById("terminal-log");
      if (output) output.innerHTML = "";
      return "";
    }
  },
  "/ping": {
    description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
    exec: () => "üèì Pong!"
  }
};

// --- –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ ---
let commandHistory = [];
let historyIndex = -1;

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ---
async function handleCommand(event) {
  if (event.key === "Enter" || event.type === "run") {
    const input = document.getElementById("terminal-input");
    const cmd = input.value.trim();
    input.value = "";
    if (!cmd) return;

    printToTerminal("> " + cmd);
    commandHistory.unshift(cmd);
    commandHistory = commandHistory.slice(0, 50);
    historyIndex = -1;

    const [command, ...args] = cmd.split(" ");
    const action = commands[command];

    if (!action) {
      printToTerminal("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help", true);
      return;
    }

    try {
      const result = await action.exec(args);
      if (result) printToTerminal(result);
    } catch (err) {
      printToTerminal("‚ö†Ô∏è " + err, true);
    }

    updateBalanceUI();
  }
}

// --- –ö–Ω–æ–ø–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
document.addEventListener("DOMContentLoaded", () => {
  // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  if (!localStorage.getItem("wallet_created")) {
    localStorage.setItem("wallet_created", new Date().toISOString());
  }
  updateBalanceUI();

  const input = document.getElementById("terminal-input");
  const enterBtn = document.getElementById("btn-enter");
  const copyBtn = document.getElementById("btn-copy");
  const addBtn = document.getElementById("add-coins");
  const resetBtn = document.getElementById("reset-wallet");

  if (input) {
    input.addEventListener("keydown", handleCommand);
    input.addEventListener("keydown", (e) => {
      if (e.key === "ArrowUp") {
        if (commandHistory.length > 0) {
          historyIndex = Math.min(historyIndex + 1, commandHistory.length - 1);
          input.value = commandHistory[historyIndex] || "";
        }
        e.preventDefault();
      } else if (e.key === "ArrowDown") {
        if (historyIndex > 0) {
          historyIndex--;
          input.value = commandHistory[historyIndex] || "";
        } else {
          historyIndex = -1;
          input.value = "";
        }
        e.preventDefault();
      }
    });
  }

  if (enterBtn) enterBtn.addEventListener("click", () => handleCommand({ key: "Enter" }));
  if (copyBtn) copyBtn.addEventListener("click", () => {
    if (input) {
      navigator.clipboard.writeText(input.value || "").then(() => {
        printToTerminal("üìã –ö–æ–º–∞–Ω–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞.");
      });
    }
  });
  if (addBtn) addBtn.addEventListener("click", () => {
    addCoins(10);
    updateBalanceUI();
  });
  if (resetBtn) resetBtn.addEventListener("click", () => {
    resetWallet();
    updateBalanceUI();
  });
});
